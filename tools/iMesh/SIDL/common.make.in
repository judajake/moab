@SET_MAKE@

LIBS = $(LTLIBS) -L$(BABEL_DIR)/lib -lsidl

INCLUDES = -I$(BABEL_DIR)/include \
	   -I$(builddir) -I$(srcdir) \
           -I$(imesh_srcdir) \
           -I$(imesh_builddir) \
           -I$(sidl_srcdir) 

imesh_srcdir = $(sidl_srcdir)/..
imesh_builddir = ../..
sidl_srcdir = ../@srcdir@
sidl_builddir = ..
srcdir = ../@srcdir@/$(bdir)
top_srcdir = ../@top_srcdir@
VPATH = 
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../../../..
builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
subdir = tools/iMesh/SIDL/$(bdir)
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)

CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@

ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BABEL_DIR = @BABEL_DIR@
BABEL = $(BABEL_DIR)/bin/babel
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DAGMC_CONFIG_OPTIONS = @DAGMC_CONFIG_OPTIONS@
DEFINES = @DEFINES@

# Some variables
DEFS = $(DEFINES) -DIS_BUILDING_MB
DEPDIR = @DEPDIR@
DISTCHECK_CONFIGURE_FLAGS = @DISTCHECK_CONFIGURE_FLAGS@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
GREP = @GREP@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PARALLEL_FALSE = @PARALLEL_FALSE@
PARALLEL_HDF5_FALSE = @PARALLEL_HDF5_FALSE@
PARALLEL_HDF5_TRUE = @PARALLEL_HDF5_TRUE@
PARALLEL_TRUE = @PARALLEL_TRUE@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@

# Don't require GNU-standard files (Changelog, README, etc.)
AUTOMAKE_OPTIONS = foreign

# The list of source files, and any header files that do not need to be installed
SOURCES = $(C_SRCS) $(CXX_SRCS)
OBJECTS = $(C_SRCS:.c=.lo) $(CXX_SRCS:.cc=.lo)
HEADERS = $(IMPLHDRS) $(IORHDRS) $(STUBHDRS)

all: debug $(TARGET_LIB)

debug:
	pwd
	@echo "srcdir = $(srcdir)"
	@echo "builddir = $(builddir)"
	@echo "sidl_srcdir = $(sidl_srcdir)"
	@echo "sidl_builddir = $(sidl_builddir)"
	@echo "imesh_srcdir = $(imesh_srcdir)"
	@echo "imesh_builddir = $(imesh_builddir)"

install: install-lib install-headers

uninstall: uninstall-lib uninstall-headers

$(TARGET_LIB): $(OBJECTS) $(LTLIBS)
	$(LIBLINK) -rpath $(libdir) $(LDFLAGS) $(OBJECTS) $(LIBADD) $(LIBS)


install-lib: $(TARGET_LIB)
	test -d "$(libdir)" || mkdir "$(libdir)"
	$(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) $< '$(DESTDIR)$(libdir)/$<'

uninstall-lib:
	$(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$(TARGET_LIB)"

install-headers: $(HEADERS)
	test -d "$(includedir)" || mkdir "$(includedir)"
	@list='$(HEADERS)'; for p in $$list; do \
	  $(ECHO) $(INSTALL_HEADER) $$p $(DESTDIR)$(includedir)/$$p ; \
	  $(INSTALL_HEADER) "$$p" "$(DESTDIR)$(includedir)/$$p" ; \
	done

uninstall-headers:
	@list='$(HEADERS)'; for p in $$list; do \
	  $(ECHO) "rm -f $(DESTDIR)$(includedir)/$$p" ; \
	  rm -f "$(DESTDIR)$(includedir)/$$p" ; \
	done

.cc.lo:
	$(LTCXXCOMPILE) -c -o $@ $<

.c.lo:
	$(LTCOMPILE) -c -o $@ $<

.SUFFIXES: .lo .cc .c

.PHONEY: all install uninstall install-lib uninstall-lib install-headers uninstall-headers

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:


# dependencies
#
# babel generates a babel.make.dependencies, but at least for 
# 0.10.10, everything it lists depends either directly or 
# indirectly on the SIDL file.  As we're using the 'babel.make'
# as a timestamp, just depend on that to achieve nearly the 
# same effect.
$(OBJECTS) : babel.make

# server implementation files also depend on the C interface
IMESH_C_INC = $(imesh_srcdir)/iBase.h \
              $(imesh_srcdir)/iMesh.h \
              $(imesh_builddir)/iBase_FCDefs.h \
	      $(imesh_srcdir)/iMesh_protos.h

IMPLOBJS = $(IMPLSRCS:.cc=.lo)
$(IMPLOBJS) : $(IMESH_C_INC)
